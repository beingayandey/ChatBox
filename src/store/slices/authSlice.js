import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the auth slice
// This represents the authentication-related data in the Redux store
const initialState = {
  user: null, // Stores user data (e.g., { uid, displayName, email })
  token: null, // Stores authentication token (if used, e.g., Firebase ID token)
  isAuthenticated: false, // Tracks whether the user is logged in
  provider: null, // Stores the authentication provider (e.g., "google")
};

// Create the auth slice using Redux Toolkit
// A slice combines reducers, actions, and state for authentication
const authSlice = createSlice({
  // Name of the slice, used in action types (e.g., "auth/loginSuccess")
  name: "auth",

  // The initial state defined above
  initialState,

  // Reducers define how the state changes in response to actions
  reducers: {
    // Action to handle successful login
    // Updates state with user data, token, and provider
    loginSuccess: (state, action) => {
      // Update user with the payload's user object (e.g., from Firebase Auth)
      state.user = action.payload.user;

      // Update token with the payload's token (or null if not provided)
      // Tokens are optional, depending on the auth system
      state.token = action.payload.token || null;

      // Set isAuthenticated to true to indicate the user is logged in
      state.isAuthenticated = true;

      // Store the provider (e.g., "google" for Google Auth)
      state.provider = action.payload.provider;
    },

    // Action to handle logout
    // Resets the auth state to its initial values
    logout: (state) => {
      // Clear user data
      state.user = null;

      // Clear token
      state.token = null;

      // Set isAuthenticated to false to indicate the user is logged out
      state.isAuthenticated = false;

      // Clear provider
      state.provider = null;
    },
  },
});

// Export the actions generated by the slice
// These can be dispatched to update the auth state
export const { loginSuccess, logout } = authSlice.actions;

// Export the reducer to include in the Redux store
// This handles all state updates for the auth slice
export default authSlice.reducer;
